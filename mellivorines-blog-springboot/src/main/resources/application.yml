server:
  port: 8080
spring:
  file-storage: #文件存储配置
    default-platform: local-plus-1 #默认使用的存储平台
    thumbnail-suffix: ".min.jpg" #缩略图后缀，例如【.min.jpg】【.png】
    #对应平台的配置写在这里，注意缩进要对齐
    local-plus:
      - platform: local-plus-1 # 存储平台标识
        enable-storage: true  #启用存储
#        enable-access: true #启用访问（线上请使用 Nginx 配置，效率更高）
        domain: "http://127.0.0.1:8080/" # 访问域名，例如：“http://127.0.0.1:8030/local-plus/”，注意后面要和 path-patterns 保持一致，“/”结尾，本地存储建议使用相对路径，方便后期更换域名
        base-path: local-plus/ # 基础路径
        path-patterns: /local-plus/** # 访问路径
        storage-path: /Users/lilinxi/data/ # 存储路径
    minio:
      - platform: minio-1 # 存储平台标识
        enable-storage: true  # 启用存储
        access-key: minio_root
        secret-key: minio_123456
        end-point: http://localhost:9000
        bucket-name: salamander-blog
        domain: http://localhost:9000/ # 访问域名，注意“/”结尾，例如：http://minio.abc.com/abc/
        base-path: test/ # 基础路径

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  thymeleaf:
    cache: false
  security:
    jwt:
      key: 'abcdefghijklmn'
      expire: 72
      limit:
        base: 10
        upgrade: 300
        frequency: 30
    filter:
      order: -100
  web:
    resources:
      static-locations: classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:/Users/lilinxi/data/
    verify:
      mail-limit: 60
    flow:
      period: 3
      limit: 50
      block: 30
    cors:
      origin: '*'
      credentials: false
      methods: '*'
  # 定时器配置
  quartz:
    # 使用数据库存储
    job-store-type: jdbc
    # 初始化完成后自动启动调度程序
    autoStartup: true
    properties:
      org:
        quartz:
          # 调度器配置
          scheduler:
            instanceName: bootQuartzScheduler
            instanceId: AUTO
          # 存储配置
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            driverDelegateClass:  org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: qrtz_
            isClustered: true
            misfireThreshold: 12000
            clusterCheckinInterval: 15000
            useProperties: false
          # 线程池配置
          threadPool:
            threadNamePrefix: Boot_Job_Pool
            threadPriority: 5
            threadCount: 10
            class: org.quartz.simpl.SimpleThreadPool
  mail:
    host: smtp.163.com
    protocol: smtp
    default-encoding: UTF-8
    username: ${email_username}
    password: ${email_password}
    port: 465
    test-connection: true
    properties:
      mail:
        smtp:
          auth: true
          socketFactory:
            class: javax.net.ssl.SSLSocketFactory
            port: 465
          starttls:
            enable: true
            required: true

  data:
    redis:
      host: ${redis_host}
      port: 6379
      database: 0
      password: ${redis_password} #默认为空
      timeout: 3000ms
      lettuce:
        pool:
          max-active: 20  # 最大连接数，负值表示没有限制，默认8
          max-wait: -1    # 最大阻塞等待时间，负值表示没限制，默认-1
          max-idle: 8     # 最大空闲连接，默认8
          min-idle: 0     # 最小空闲连接，默认0

  datasource:
    url: jdbc:mysql://${sql_host}:3306/mellivorines_blog?serverTimezone=GMT%2B8
    username: ${sql_username}
    password: ${sql_password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  rabbitmq:
    host: ${rabbitmq_host}
    port: 5672
    username: ${rabbitmq_username} #默认用户名和密码
    password: ${rabbitmq_password}
    listener:
      simple:
        retry:
          enabled: true
          max-attempts: 3
          initial-interval: 3000
    virtual-host: /  # 虚拟主机

  elasticsearch:
    uris:
      - ${elasticsearch_host}

# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: io.github.mellivorines.blog
# knife4j的增强配置，不需要增强可以不配
knife4j:
  enable: true
  setting:
    language: zh_cn

jimmer:
  language: kotlin
  dialect: org.babyfish.jimmer.sql.dialect.MySqlDialect
  offset-optimizing-threshold: 10
  id-only-target-checking-level: ALL
  database-validation-mode: ERROR
  show-sql: true
  pretty-sql: true
  executor-context-prefixes:
    - org.babyfish.jimmer.sql.example.business
  client:
    ts:
      path: /ts.zip

website:
  url: https://mellivorines.github.io/